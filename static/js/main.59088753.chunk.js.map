{"version":3,"sources":["UI/Card.js","Components/ExpensesFilter.js","Components/ExpenseDate.js","Components/ExpenseItem.js","Components/ExpensesList.js","Components/Chart/ChartBar.js","Components/Chart/Chart.js","Components/ExpensesChart.js","Components/Expenses.js","Components/ExpenseForm.js","Components/NewExpense.js","App.js","index.js"],"names":["Card","props","classes","className","children","ExpensesFilter","value","selected","onChange","event","onChangeFilter","target","ExpenseDate","month","date","toLocaleString","day","year","getFullYear","ExpenseItem","title","amount","ExpensesList","items","length","map","expense","id","ChartBar","barFillHeight","maxValue","Math","round","style","height","label","Chart","dataPointValues","dataPoints","dataPoint","totalMaximum","max","ExpensesChart","chartDataPoints","expenses","getMonth","Expenses","useState","filteredYear","setFilteredYear","filteredExpenses","filter","toString","selectedYear","ExpenseForm","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","onSubmit","preventDefault","expenseData","Date","onSaveExpenseData","type","min","step","NewExpense","isEditing","setIsEditing","onClick","enteredExpenseData","random","onAddExpense","onCancel","DUMMY_EXPENSES","App","setExpenses","prevExpenses","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.59088753.chunk.js","sourcesContent":["import \"./Card.css\";\r\n\r\nfunction Card(props) {\r\n  const classes = 'card ' + props.className;\r\n  return <div className={classes}>{props.children}</div>;\r\n}//therefore anything that is taken from outside is dynamically added to the string\r\n\r\nexport default Card;\r\n//just like making an HTML tag out of nowhere\r\n//having content in between newly created \r\n//HTML tags doesn't just happen like that!\r\n","import React from \"react\";\r\n\r\nimport \"./ExpensesFilter.css\";\r\n\r\nconst ExpensesFilter = (props) => {\r\n  const dropdownChangeHandler = (event) => {\r\n    props.onChangeFilter(event.target.value);\r\n  };\r\n  return (\r\n    <div className=\"expenses-filter\">\r\n      <div className=\"expenses-filter__control\">\r\n        <label>\r\n          Filter by year  {\" \"}\r\n        </label>\r\n        <select value={props.selected} onChange={dropdownChangeHandler}>\r\n          <option value=\"2022\">2022</option>\r\n          <option value=\"2021\">2021</option>\r\n          <option value=\"2020\">2020</option>\r\n          <option value=\"2019\">2019</option>\r\n        </select>\r\n        \r\n      </div>\r\n      <br></br>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExpensesFilter;\r\n","import \"./ExpenseDate.css\";\r\n\r\nconst ExpenseDate = (props) => {\r\n  const month = props.date.toLocaleString(\"en-US\", { month: \"long\" });\r\n  const day = props.date.toLocaleString(\"en-US\", { day: \"2-digit\" });\r\n  const year = props.date.getFullYear();\r\n  return (\r\n    <div className=\"expense-date\">\r\n      <div className=\"expense-date__month\">{month}</div>\r\n      <div className=\"expense-date__day\">{day}</div>\r\n      <div className=\"expense-date__year\">{year}</div>\r\n      {/* so we need to extract these values individually */}\r\n    </div>\r\n  );\r\n};\r\nexport default ExpenseDate;\r\n","import React from \"react\";\r\n//all the React hooks start with the word 'use' in their name\r\nimport ExpenseDate from \"./ExpenseDate\";\r\nimport Card from \"../UI/Card\";\r\n\r\nimport \"./ExpenseItem.css\";\r\n//by using our components as JSX code we make React aware of the component functions\r\n//useState is nothing but a React Hook\r\nfunction ExpenseItem(props) {\r\n  // //therefore for every instance call useState gets invoked everytime\r\n  // const [title, setTitle] = useState(props.title); //constant destructuring\r\n  // console.log(\"Expense Item evaluated by React\");\r\n  // //useState basically returns an array {initial variable, final variable}\r\n  // const clickHandler = () => {\r\n  //   setTitle(\"Updated!\"); //so after the initial state is updated, the final React state remains unchanged\r\n  //   //now once this function is called\r\n  //   //it not just updates the variable\r\n  //   //it also re-calls the function and the entire gets executed\r\n  //   console.log(title);\r\n  // };\r\n  return (\r\n    //so the state is really updated on a per component instance basis\r\n    <Card className=\"expense-item\">\r\n      <ExpenseDate date={props.date} />\r\n      <div className=\"expense-item__description\">\r\n        {\" \"}\r\n        <h2>{props.title}</h2>{\" \"}\r\n      </div>\r\n      <div className=\"expense-item__price\"> â‚¹ {props.amount} </div>\r\n    </Card>\r\n  ); //React exposes all the default events and they start with on\r\n  //so all these event handler props (on-props) essentially want a value\r\n  //which is nothing but a function\r\n\r\n  //we can either add an\r\n}\r\nexport default ExpenseItem;\r\n//its state that adds reactivity to our application\r\n","import React from \"react\";\r\n\r\nimport ExpenseItem from \"./ExpenseItem\";\r\nimport Card from \"../UI/Card\";\r\nimport \"./ExpensesList.css\";\r\nconst ExpensesList = (props) => {\r\n  if (props.items.length === 0) {\r\n    return <h2 className=\"expenses-list__fallback\"> Found no expenses. </h2>;\r\n  }\r\n\r\n  return (\r\n    <li>\r\n      <Card className=\"expenses-list\">\r\n        {props.items.map((expense) => (\r\n          <ExpenseItem\r\n            key={expense.id}\r\n            title={expense.title}\r\n            amount={expense.amount}\r\n            date={expense.date}\r\n          />\r\n        ))}\r\n      </Card>\r\n    </li>\r\n  );\r\n};\r\nexport default ExpensesList;\r\n","import React from \"react\";\r\nimport \"./ChartBar.css\";\r\n\r\nconst ChartBar = (props) => {\r\n  let barFillHeight = \"0%\";\r\n  if (props.maxValue > 0) {\r\n    barFillHeight = Math.round((props.value / props.maxValue) * 100) + \"%\";\r\n  }\r\n\r\n  return (\r\n    <div className=\"chart-bar\">\r\n      <div className=\"chart-bar__inner\">\r\n        <div\r\n          className=\"chart-bar__fill\"\r\n          style={{ height: barFillHeight }}\r\n        ></div>\r\n        {/* here the dynamic value is a Javascript object, therefore we the syntax is a double curly brace */}\r\n        {/* we should use the css property names as key-names */}\r\n        {/* here we're supposed to dynamically stylize the chart according to the given values */}\r\n      </div>\r\n      <div className=\"chart-bar__label\">{props.label}</div>\r\n    </div>\r\n  );\r\n};\r\nexport default ChartBar;\r\n// for setting up the style prop element on React we need to replace the dashed stylized properties\r\n// into camelCase property names for the compiler to understand evevrything\r\n","import React from \"react\";\r\n\r\nimport ChartBar from \"./ChartBar\";\r\nimport \"./Chart.css\";\r\nconst Chart = (props) => {\r\n   const dataPointValues = props.dataPoints.map(dataPoint => dataPoint.value);\r\n   //here dataPointValues is an array\r\n    const totalMaximum = Math.max(...dataPointValues);\r\n  \r\n    return (\r\n    <div className=\"chart\">\r\n      {props.dataPoints.map((dataPoint) => (\r\n        <ChartBar\r\n          key={dataPoint.label} //since the label is unique\r\n          //also having an id helps react to render the content more efficiently\r\n          value={dataPoint.value}\r\n          maxValue={totalMaximum}\r\n          label={dataPoint.label}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React from \"react\";\r\nimport Chart from \"./Chart/Chart\";\r\nconst ExpensesChart = (props) => {\r\n  const chartDataPoints = [\r\n    { label: \"Jan\", value: 0 },\r\n    { label: \"Feb\", value: 0 },\r\n    { label: \"Mar\", value: 0 },\r\n    { label: \"Apr\", value: 0 },\r\n    { label: \"May\", value: 0 },\r\n    { label: \"Jun\", value: 0 },\r\n    { label: \"Jul\", value: 0 },\r\n    { label: \"Aug\", value: 0 },\r\n    { label: \"Sep\", value: 0 },\r\n    { label: \"Oct\", value: 0 },\r\n    { label: \"Nov\", value: 0 },\r\n    { label: \"Dec\", value: 0 },\r\n  ];\r\n\r\n  //we use a for-of loop for an array\r\n  //we use a for-in loop for an object\r\n  for (const expense of props.expenses) {\r\n    const expenseMonth = expense.date.getMonth();\r\n    //starting at 0 => January => 0\r\n    //here month is behaving like an index\r\n    //terms like value and amount get inter-linked because they're\r\n    //all held together by props\r\n    chartDataPoints[expenseMonth].value += expense.amount;\r\n  }\r\n  return <Chart dataPoints={chartDataPoints} />;\r\n};\r\n\r\nexport default ExpensesChart;\r\n","import React, { useState } from \"react\";\r\nimport Card from \"../UI/Card\";\r\nimport ExpensesFilter from \"./ExpensesFilter\";\r\nimport ExpensesList from \"./ExpensesList\";\r\nimport ExpensesChart from \"./ExpensesChart\";\r\nimport \"./Expenses.css\";\r\n\r\nconst Expenses = (props) => {\r\n  const [filteredYear, setFilteredYear] = useState(\"2020\");\r\n\r\n  const filterChangeHandler = (selectedYear) => {\r\n    setFilteredYear(selectedYear);\r\n  };\r\n  const filteredExpenses = props.items.filter((expense) => {\r\n    return expense.date.getFullYear().toString() === filteredYear;\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <Card className=\"expenses\">\r\n        {/* creating a controlled component */}\r\n        <ExpensesFilter\r\n          selected={filteredYear}\r\n          onChangeFilter={filterChangeHandler}\r\n        />\r\n        <ExpensesChart expenses={filteredExpenses} />\r\n        <ExpensesList items={filteredExpenses} />\r\n\r\n        {/* //triggering change in filter year */}\r\n        {/* this clearly depicts the dynamic display of an array */}\r\n        {/* this is how we transform an array to an array full of jsx items */}\r\n        {/* the map() function creates a new array based on a previous array and it transforms every element of that previous array */}\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\nexport default Expenses;\r\n//therefore the app composition is extremely important in react\r\n","import React, { useState } from \"react\";\r\nimport \"./ExpenseForm.css\";\r\n\r\nfunction ExpenseForm(props) {\r\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\r\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\r\n  const [enteredDate, setEnteredDate] = useState(\"\");\r\n  // const [userInput, setUserInput] = useState({\r\n  //   enteredTitle: \"\",\r\n  //   enteredAmount: \"\",\r\n  //   enteredDate: \"\",\r\n  // });\r\n  //for allowing the users to enter data into the expense form\r\n  //the users shall enter :\r\n  //title\r\n  //date\r\n  //amount\r\n  const titleChangeHandler = (event) => {\r\n    setEnteredTitle(event.target.value); //this would represent that the title is changed for every keystroke of the user input\r\n    // setUserInput({\r\n    //   ...userInput, //by doing this we make sure that the other values are not thrown away and therefore they get overriden\r\n    //   enteredTitle: \"event.target.value\",\r\n    // });\r\n    // setUserInput((prevState) => {\r\n    //   return { ...prevState, enteredTitle: \"event.target.value\" };\r\n    //react schedules their state updates, which is why if we use the previous approach, we might end up with the incorrect state snapshot\r\n    // });//the prevState function assures that react gives us the latest state snapshot\r\n  };\r\n  const amountChangeHandler = (event) => {\r\n    setEnteredAmount(event.target.value);\r\n    // setUserInput({\r\n    //   // enteredTitle: 'event.target.value',\r\n    //   // enteredAmount: 'event.target.value',\r\n    //   // enteredDate: '' we can use this or we have to use the spread operator\r\n    //   //a moodern-day javascript operator\r\n    //   ...userInput,\r\n    //   enteredAmount: \"event.target.value\",\r\n    // });\r\n  };\r\n  const dateChangeHandler = (event) => {\r\n    setEnteredDate(event.target.value);\r\n    // setUserInput({\r\n    //   ...userInput,\r\n    //   enteredDate: \"event.target.value\", //in this approach we're greatly relying upon copying back the values of the other objects of the state\r\n    // });\r\n  };\r\n  // in order to prevent a web development server to show deafult\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const expenseData = {\r\n      title: enteredTitle,\r\n      amount: enteredAmount,\r\n      date: new Date(enteredDate), //this constructor will parse the date string and convert it into the date object\r\n    };\r\n    props.onSaveExpenseData(expenseData);\r\n    setEnteredTitle(\"\"); //we do this in order to override what the user entered in order to clear the input\r\n    setEnteredAmount(\"\");\r\n    setEnteredDate(\"\");\r\n  };\r\n  \r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <div className=\"new-expense__controls\">\r\n        {/* adding onSubmit event listener */}\r\n        <div className=\"new-expense__control\">\r\n          <label>Title</label>\r\n          <input\r\n            type=\"text\"\r\n            value={enteredTitle} //so here we have our data collected and stored inside the object\r\n            onChange={titleChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Amount</label>\r\n          <input\r\n            type=\"number\"\r\n            min=\"0.01\"\r\n            step=\"0.01\"\r\n            value={enteredAmount}\r\n            onChange={amountChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Date</label>\r\n          <input\r\n            type=\"date\"\r\n            min=\"2019-01-01\"\r\n            max=\"2022-12-31\"\r\n            value={enteredDate}\r\n            onChange={dateChangeHandler}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"new-expense__actions\">\r\n        <button type=\"submit\">Add Expense</button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\nexport default ExpenseForm;\r\n","import React, { useState } from \"react\";\r\nimport ExpenseForm from \"./ExpenseForm\";\r\nimport \"./NewExpense.css\";\r\nconst NewExpense = (props) => {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n\r\n  const saveExpenseDataHandler = (enteredExpenseData) => {\r\n    const expenseData = {\r\n      ...enteredExpenseData,\r\n      id: Math.random().toString(),\r\n    };\r\n    props.onAddExpense(expenseData);\r\n    setIsEditing(false);\r\n  };\r\n  const startEditingHandler = () => {\r\n    setIsEditing(true);\r\n  };\r\n\r\n  const stopEditingHandler = () => {\r\n    setIsEditing(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"new-expense\">\r\n      {!isEditing && (\r\n        <button onClick={startEditingHandler}>Add new handler</button>\r\n      )}{\" \"}\r\n      {/* taking the form into a separate component just to keep the form logic established */}\r\n      {isEditing && (\r\n        <ExpenseForm\r\n          onSaveExpenseData={saveExpenseDataHandler}\r\n          onCancel={stopEditingHandler}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default NewExpense;\r\n","import React, { useState } from \"react\";\r\nimport Expenses from \"./Components/Expenses.js\";\r\nimport NewExpense from \"./Components/NewExpense.js\";\r\n//now we can use this expense item like a html tag\r\n//react understands that lower case components are html components and upper case components are React Components\r\nconst DUMMY_EXPENSES = [\r\n  {\r\n    id: \"e1\",\r\n    title: \"Toilet Paper\",\r\n    amount: 94.12,\r\n    date: new Date(2020, 7, 14),\r\n  },\r\n  { id: \"e2\", title: \"New TV\", amount: 799.49, date: new Date(2021, 2, 12) },\r\n  {\r\n    id: \"e3\",\r\n    title: \"Car Insurance\",\r\n    amount: 294.67,\r\n    date: new Date(2021, 2, 28),\r\n  },\r\n  {\r\n    id: \"e4\",\r\n    title: \"New Desk (Wooden)\",\r\n    amount: 450,\r\n    date: new Date(2021, 5, 12),\r\n  },\r\n]; //4 objects inside this expenses array !\r\n//using the props concept the data doesn't stay\r\n//inside anymore it is received from outside\r\nconst App = () => {\r\n  const [expenses, setExpenses] = useState(DUMMY_EXPENSES);\r\n  const addExpenseHandler = (expense) => {\r\n    setExpenses((prevExpenses) => {\r\n      return [expense, ...prevExpenses];\r\n    }); //updating the state to add the new expenses\r\n    //at the same time using the spread operator to populate the existing expenses.\r\n  };\r\n  return (\r\n    <div>\r\n      <NewExpense onAddExpense={addExpenseHandler} />\r\n      <Expenses items={expenses} />{\" \"}\r\n    </div>\r\n  ); //now in order to retrieve this data into the expenseitem function we need something called 'props'\r\n};\r\nexport default App;\r\n","import ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}